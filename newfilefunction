function insertIntoCanvas(canvas, layoutId, targetRowId, item, columnIndex = null) {
  // clone whole canvas immutably
  return canvas.map(layout => {
    if (layout.layoutId !== layoutId) return layout; // skip other layouts

    // 🔁 recursive helper for inserting inside rows
    function insertRow(rows) {
      return rows.map(row => {
        // ✅ Found target row
        if (row.rowId === targetRowId) {
          if (item.type === "row") {
            // Add new row inside this row's rows
            return {
              ...row,
              rows: row.rows ? [...row.rows, item] : [item]
            };
          }

          if (item.type === "column") {
            // Insert column inside this row's columns
            const cols = [...(row.columns || [])];
            if (columnIndex !== null && columnIndex < cols.length) {
              cols.splice(columnIndex, 0, item); // insert at given index
            } else {
              cols.push(item); // push at end
            }
            return { ...row, columns: cols };
          }
        }

        // 🔁 If not target, search deeper inside columns that may have nested rows
        const updatedCols = row.columns?.map(col => {
          if (col.rows) {
            return { ...col, rows: insertRow(col.rows) };
          }
          return col;
        });

        return { ...row, columns: updatedCols || row.columns };
      });
    }

    // ✅ Update only matching layout
    return { ...layout, rows: insertRow(layout.rows) };
  });
}