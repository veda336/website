function findLayout(canvas, layoutId) {
  return canvas.find(l => l.layoutId === layoutId) || null;
}

function findRow(rows, rowId) {
  if (!rows) return null;

  for (const row of rows) {
    if (row.rowId === rowId) {
      return row;
    }

    // 🔁 Check deeper in row.columns
    for (const col of row.columns || []) {
      if (col.rows) {
        const found = findRow(col.rows, rowId);
        if (found) return found;
      }
    }
  }

  return null;
}

function findColumn(row, columnId) {
  if (!row?.columns) return null;

  for (const col of row.columns) {
    if (col.id === columnId) {
      return col;
    }

    // 🔁 If column contains rows, search inside them too
    if (col.rows) {
      for (const nestedRow of col.rows) {
        const found = findColumn(nestedRow, columnId);
        if (found) return found;
      }
    }
  }

  return null;
}

function getSelectedConfig(canvas, selected) {
  if (!selected) return null;

  // 1. Find layout
  const layout = findLayout(canvas, selected.layoutId);
  if (!layout) return null;

  // 2. Find row
  const row = findRow(layout.rows, selected.rowId);
  if (!row) return null;

  // 3. If row selected
  if (!selected.columnId) return row;

  // 4. Column selected → search recursively inside this row
  return findColumn(row, selected.columnId);
}

----latest 9/9///::/:;(--------------///------------
function insertIntoCanvas(canvas, layoutId, targetId, item, columnIndex = null) {
  return canvas.map(layout => {
    if (layout.layoutId !== layoutId) return layout;

    // Case 1: targetId is null → add row directly at top-level of layout
    if (!targetId) {
      if (item.rowId) {
        return {
          ...layout,
          rows: [...layout.rows, item] // insert row at top
        };
      }
      return layout; // columns can’t be at top-level
    }

    // Case 2: search inside layout.rows
    return {
      ...layout,
      rows: insertIntoRows(layout.rows, targetId, item, columnIndex)
    };
  });
}

function insertIntoRows(rows, targetId, item, columnIndex) {
  return rows.map(row => {
    // 👉 Insert column into this row
    if (row.rowId === targetId && item.id && !item.rowId) {
      const newColumns = [...row.columns];

      if (columnIndex !== null) {
        // ✅ Replace existing at index (or append if index is out of range)
        if (columnIndex >= 0 && columnIndex < newColumns.length) {
          newColumns[columnIndex] = item;
        } else {
          newColumns.push(item);
        }
      } else {
        newColumns.push(item);
      }

      return { ...row, columns: newColumns };
    }

    // 👉 Search inside columns
    const newColumns = row.columns.map(col => {
      // Insert row into this column
      if (col.id === targetId && item.rowId) {
        return {
          ...col,
          rows: [...(col.rows || []), item]
        };
      }

      // Recurse deeper if this column has nested rows
      if (col.rows) {
        return {
          ...col,
          rows: insertIntoRows(col.rows, targetId, item, columnIndex)
        };
      }

      return col;
    });

    return { ...row, columns: newColumns };
  });
}

