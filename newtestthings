function insertIntoCanvas(canvas, layoutId, targetId, item, columnIndex = null) {
  return canvas.map(layout => {
    if (layout.layoutId !== layoutId) return layout;

    // Case 1: targetId is null → add row directly at top-level of layout
    if (!targetId) {
      if (item.rowId) {
        return {
          ...layout,
          rows: [...layout.rows, item]
        };
      }
      return layout; // columns can’t go directly at layout level
    }

    // Case 2: search inside layout.rows
    return {
      ...layout,
      rows: insertIntoRows(layout.rows, targetId, item, columnIndex)
    };
  });
}

function insertIntoRows(rows, targetId, item, columnIndex) {
  return rows.map(row => {
    // 👉 Insert column into this row
    if (row.rowId === targetId && item.id && !item.rowId) {
      const newColumns = [...row.columns];

      if (columnIndex !== null) {
        // ✅ Replace instead of push
        if (columnIndex >= 0 && columnIndex < newColumns.length) {
          newColumns[columnIndex] = item;
        } else {
          newColumns.push(item);
        }
      } else {
        newColumns.push(item);
      }

      return { ...row, columns: newColumns };
    }

    // 👉 Search inside columns
    const newColumns = row.columns.map(col => {
      if (col.id === targetId && item.rowId) {
        // row insertion into this column
        return {
          ...col,
          rows: [...(col.rows || []), item]
        };
      }

      if (col.rows) {
        return {
          ...col,
          rows: insertIntoRows(col.rows, targetId, item, columnIndex) // 🔁 recurse deeper
        };
      }

      return col;
    });

    return { ...row, columns: newColumns };
  });
}