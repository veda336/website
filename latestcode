import React, { useState } from 'react';
import {
  Tabs,
  Tab,
  Popover,
  List,
  ListItemButton,
  ListItemText,
  Box,
  Typography,
  IconButton,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

function TabsWithArrowDropdownArray() {
  const [tabIndex, setTabIndex] = useState(0);
  const [anchorEl, setAnchorEl] = useState(null);
  const [selectedDropdownValues, setSelectedDropdownValues] = useState({});

  const tabsData = [
    { label: 'Tab 1' },
    {
      label: 'Tab with Dropdown 1',
      dropdownOptions: ['Option 1A', 'Option 1B', 'Option 1C'],
    },
    { label: 'Tab 3' },
    {
      label: 'Tab with Dropdown 2',
      dropdownOptions: ['Option 2A', 'Option 2B'],
    },
  ];

  const [currentDropdownTabIndex, setCurrentDropdownTabIndex] = useState(null);

  const handleTabChange = (_, newIndex) => {
    // Auto-select first option on tab click if dropdown exists and not selected yet
    if (
      tabsData[newIndex]?.dropdownOptions &&
      selectedDropdownValues[newIndex] === undefined
    ) {
      setSelectedDropdownValues((prev) => ({
        ...prev,
        [newIndex]: tabsData[newIndex].dropdownOptions[0],
      }));
    }

    setTabIndex(newIndex);
    setAnchorEl(null);
    setCurrentDropdownTabIndex(null);
  };

  const handleArrowClick = (event, index) => {
    event.stopPropagation();
    if (tabIndex === index) {
      setAnchorEl(event.currentTarget);
      setCurrentDropdownTabIndex(index);
    }
  };

  const handleDropdownSelect = (value) => {
    if (currentDropdownTabIndex !== null) {
      setSelectedDropdownValues((prev) => ({
        ...prev,
        [currentDropdownTabIndex]: value,
      }));
    }
    setAnchorEl(null);
    setCurrentDropdownTabIndex(null);
  };

  const open = Boolean(anchorEl);

  return (
    <Box p={2}>
      {/* Tabs */}
      <Tabs value={tabIndex} onChange={handleTabChange}>
        {tabsData.map((tab, index) => (
          <Tab
            key={tab.label}
            label={
              <Box display="flex" alignItems="center">
                <Typography>{tab.label}</Typography>
                {tab.dropdownOptions && (
                  <IconButton
                    size="small"
                    onClick={(e) => handleArrowClick(e, index)}
                    sx={{
                      ml: 0.5,
                      visibility: tabIndex === index ? 'visible' : 'hidden',
                    }}
                  >
                    <ExpandMoreIcon />
                  </IconButton>
                )}
              </Box>
            }
          />
        ))}
      </Tabs>

      {/* Popover Dropdown */}
      <Popover
        open={open}
        anchorEl={anchorEl}
        onClose={() => {
          setAnchorEl(null);
          setCurrentDropdownTabIndex(null);
        }}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        transformOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        {currentDropdownTabIndex !== null &&
          tabsData[currentDropdownTabIndex]?.dropdownOptions && (
            <List dense disablePadding>
              {tabsData[currentDropdownTabIndex].dropdownOptions.map((option) => {
                const selected =
                  selectedDropdownValues[currentDropdownTabIndex] === option;
                return (
                  <ListItemButton
                    key={option}
                    onClick={() => handleDropdownSelect(option)}
                    selected={selected}
                    sx={{
                      '&.Mui-selected': {
                        bgcolor: 'primary.main',
                        color: 'primary.contrastText',
                        '&:hover': { bgcolor: 'primary.dark' },
                      },
                    }}
                  >
                    <ListItemText primary={option} />
                  </ListItemButton>
                );
              })}
            </List>
          )}
      </Popover>

      {/* Display Selected Value and Render Dependent Components */}
      <Box mt={3} p={2} border="1px dashed grey">
        <Typography variant="subtitle1" gutterBottom>
          Currently Selected Tab: {tabsData[tabIndex].label}
        </Typography>
        {tabsData[tabIndex].dropdownOptions ? (
          <Typography>
            Selected Dropdown Value:{' '}
            <strong>{selectedDropdownValues[tabIndex]}</strong>
          </Typography>
        ) : (
          <Typography>No dropdown in this tab.</Typography>
        )}

        {/* Example: Render component based on selection */}
        {tabsData[tabIndex].dropdownOptions &&
          selectedDropdownValues[tabIndex] === 'Option 1B' && (
            <Box mt={2} p={2} bgcolor="lightblue">
              Rendering Component B because "Option 1B" is selected!
            </Box>
          )}
      </Box>
    </Box>
  );
}

export default TabsWithArrowDropdownArray;